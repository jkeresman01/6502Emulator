#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////

#include "backends/imgui_impl_glfw.h"
#include "backends/imgui_impl_opengl3.h"
#include "imgui.h"

#include <GLFW/glfw3.h>

#include <iostream>
#include <memory>
#include <vector>
#include <string>

#include <emulator/core/Assembler.h>
#include <emulator/components/Editor.h>
#include <emulator/components/HEXDisplay.h>
#include <emulator/components/LEDs.h>
#include <emulator/components/MemoryLayout.h>
#include <emulator/components/PixelDisplay.h>
#include <emulator/components/SwitchPanel.h>
#include <emulator/core/CPU6502.h>
#include <emulator/core/Memory.h>
#include <emulator/core/Disassembler.h>

namespace emulator6502
{

using Byte = uint8_t;
using Word = uint16_t;

//////////////////////////////////////////////////////////////
///
/// @class Emulator6502
///
/// @brief Main class for managing the 6502 emulator, including
///        the CPU, assembler, disassembler, editor, and UI
///        components.
///
//////////////////////////////////////////////////////////////
class Emulator6502
{
public:
    //////////////////////////////////////////////////////////////
    ///
    /// @brief Default constructor
    ///
    //////////////////////////////////////////////////////////////
    Emulator6502();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Initializes the emulator environment, including
    ///        the CPU, window, and components.
    ///
    //////////////////////////////////////////////////////////////
    void Init();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Main execution loop for running the emulator
    ///
    //////////////////////////////////////////////////////////////
    void Run();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Shuts down the emulator and cleans up resources
    ///
    //////////////////////////////////////////////////////////////
    void Shutdown();

private:
    //////////////////////////////////////////////////////////////
    ///
    /// @brief Initializes all hardware-like components of the
    ///        emulator (e.g., displays, switches, LEDs).
    ///
    //////////////////////////////////////////////////////////////
    void InitComponents();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Creates and initializes the main GLFW/ImGui window
    ///
    //////////////////////////////////////////////////////////////
    void InitWindow();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Resets the emulator state (CPU, memory, components)
    ///
    //////////////////////////////////////////////////////////////
    void Reset();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Destroys and cleans up all emulator components
    ///
    //////////////////////////////////////////////////////////////
    void DestroyComponents();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Loads a program into the emulator's memory
    ///
    //////////////////////////////////////////////////////////////
    void LoadProgramIntoMemory();

private:
    //////////////////////////////////////////////////////////////
    ///
    /// @brief Main render loop for drawing emulator UI
    ///
    //////////////////////////////////////////////////////////////
    void Render();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Renders all emulator components (e.g., displays,
    ///        panels, editors)
    ///
    //////////////////////////////////////////////////////////////
    void RenderComponents();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Renders a window with emulator control buttons
    ///
    //////////////////////////////////////////////////////////////
    void RenderControlButtonsWindow();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Renders a window with the CPU status (registers,
    ///        flags, etc.)
    ///
    //////////////////////////////////////////////////////////////
    void RenderCPUStatusWindow();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Renders a popup window displaying disassembled
    ///        instructions
    ///
    //////////////////////////////////////////////////////////////
    void RenderDissasemblyPopup();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Renders a popup for stack overflow warnings
    ///
    //////////////////////////////////////////////////////////////
    void RenderStackOverflowPopup();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Opens the disassembly popup window
    ///
    //////////////////////////////////////////////////////////////
    void OpenDissasemblyPopup();

private:
    //////////////////////////////////////////////////////////////
    ///
    /// @brief Pointer to the GLFW window used by ImGui
    ///
    //////////////////////////////////////////////////////////////
    GLFWwindow* m_Window = nullptr;

    //////////////////////////////////////////////////////////////
    ///
    /// @brief The 6502 CPU core
    ///
    //////////////////////////////////////////////////////////////
    std::unique_ptr<CPU6502> m_CPU = std::make_unique<CPU6502>();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief The assembler for converting source code into
    ///        machine instructions
    ///
    //////////////////////////////////////////////////////////////
    std::unique_ptr<Assembler> m_Assembler = std::make_unique<Assembler>();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief The disassembler for decoding machine code back
    ///        into assembly
    ///
    //////////////////////////////////////////////////////////////
    std::unique_ptr<Disassembler> m_Disassembler = std::make_unique<Disassembler>();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Assembly code editor component
    ///
    //////////////////////////////////////////////////////////////
    std::unique_ptr<Editor> m_AsmEditor = std::make_unique<Editor>();

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Collection of active emulator UI components
    ///
    //////////////////////////////////////////////////////////////
    std::vector<std::unique_ptr<AbstractComponent>> m_Components;

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Cached disassembly lines for display
    ///
    //////////////////////////////////////////////////////////////
    std::vector<std::string> m_Dissasembly;

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Flag indicating if the disassembly popup should
    ///        be shown
    ///
    //////////////////////////////////////////////////////////////
    bool m_ShowDisassemblyPopup = false;

    //////////////////////////////////////////////////////////////
    ///
    /// @brief Number of components in the emulator
    ///
    //////////////////////////////////////////////////////////////
    static constexpr uint32_t COMPONENTS_NO = 5;
};

} // namespace emulator6502

